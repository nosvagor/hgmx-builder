package nav

import (
	"github.com/nosvagor/hgmx-builder/views/components/button"
	"github.com/nosvagor/hgmx-builder/views/components/icon"
)

var menuControllerScript = templ.NewOnceHandle()

templ (p *Props) menuController() {
	@menuControllerScript.Once() {
		<script type="module">
			import { animate, stagger } from "/static/scripts/motion.min.js";
			
			const menu = document.getElementById('nav-menu');
			let currentIcon = 'hamburger';
			let menuDelayTimer;
			
			function firstSegment(path) {
				return (path || '').replace(/\/+$/, '').split('/').filter(Boolean)[0] || '';
			}
			
			function updateActiveBookmarks() {
				const currentSeg = firstSegment(window.location.pathname);
				const containers = [
					document.getElementById('navbar-bookmarks'),
					document.getElementById('menu-bookmarks'),
					document.getElementById('menu-account'),
				].filter(Boolean);

				containers.forEach(container => {
					const buttons = Array.from(container.querySelectorAll('button'));
					buttons.forEach(btn => {
						const hx = btn.getAttribute('hx-get') || '';
						const hrefSeg = firstSegment(hx);
						const isActive = hrefSeg && currentSeg === hrefSeg;
						if (isActive) {
							btn.classList.add('text-accent-401');
							btn.classList.add('bookmark-active');
							btn.dataset.active = 'true';
						} else {
							btn.classList.remove('text-accent-401');
							btn.classList.remove('bookmark-active');
							btn.dataset.active = 'false';
						}
					});
				});
			}

			const iconPaths = {
				user: {
					top: "M 7,6 C 7,0, 17,0, 17,6",
					mid: "M 7,6 C 7,12, 17,12, 17,6",
					bot: "M 4,20 C 4,14, 20,14, 20,20",
				},
				hamburger: {
					top: "M 3,7 C 8,7 16,7 21,7",
					mid: "M 3,12 C 8,12 16,12 21,12",
					bot: "M 3,17 C 8,17 16,17 21,17",
				},
				close: {
					top: "M 6,6 C 9,9 15,15 18,18",
					mid: "M 26,12 C 26,12 26,12 26,12",
					bot: "M 6,18 C 9,15 15,9 18,6",
				}
			};
			
			function setMenuIcon(icon) {
				const top = document.getElementById('menu-top');
				const mid = document.getElementById('menu-mid');
				const bot = document.getElementById('menu-bot');
				const t = { duration: 0.3, ease: "easeOut" };

				animate(top, { d: iconPaths[icon].top }, t);
				animate(mid, { d: iconPaths[icon].mid }, t);
				animate(bot, { d: iconPaths[icon].bot }, t);
				currentIcon = icon;
			}

			function animateBookmarksOut() {
				const container = document.getElementById('navbar-bookmarks');
				if (!container) return;
				if (container.dataset.state === 'out') return;
				const items = Array.from(container.querySelectorAll(':scope > button'));
				if (!items.length) return;

				container.dataset.state = 'out';

				items.forEach((el, i) => {
					const rect = el.getBoundingClientRect();
					const dl = 0 - rect.left;
					animate(el, 
						{ x: [0, dl], scale: [1, 1, 1, 1, 1.25, 0] }, 
						{ delay: i * 0.069, ease: "easeInOut" }
					);
				});
			}

			function animateBookmarksIn() {
				const container = document.getElementById('navbar-bookmarks');
				if (!container) return;
				if (container.dataset.state === 'in') return;
				const items = Array.from(container.querySelectorAll(':scope > button'));
				if (!items.length) return;

				container.dataset.state = 'in';

				animate(items, { x: 0, scale: 1 }, { delay: stagger(0.03), type: 'spring', bounce: 0.4, duration: 0.5 })
			}

			function toggleMenu() {
				const open = menu.classList.contains('menu-open');
				const expandedMenu = document.getElementById('nav-menu-expanded');
				const menuBackdrop = document.getElementById('menu-backdrop');
				const menuBg = document.getElementById('menu-bg');

				function closeMenu() {
					menu.classList.remove('menu-open');
					setMenuIcon('hamburger');

					if (window.scrollY === 0) {
						animateBookmarksIn();
					}
					
					const escIndicator = document.getElementById('esc-indicator');
					if (escIndicator) {
						animate(escIndicator, { width: '0ch', opacity: 0, transform: 'translate(-100%)' }, { duration: 0.15, easing: 'steps(1, end)' });
					}
					
					expandedMenu.style.pointerEvents = 'none';
					animate(menuBackdrop, { opacity: 0 }, { duration: 0.16, delay: 0.1 });
					animate(menuBg, { transform: 'translateX(-100%)' }, { type: 'spring', bounce: 0.2, duration: 0.25 });
				}

				function openMenu() {
					menu.classList.add('menu-open');
					setMenuIcon('close');

					if (window.scrollY === 0) {
						animateBookmarksOut();
					}
					
					expandedMenu.style.pointerEvents = 'auto'; 
					animate(menuBackdrop, { opacity: 1 }, { duration: 0.25 });
					animate(menuBg, { transform: 'translateX(0%)' }, { type: 'spring', bounce: 0.2, duration: 0.42 })

					const escIndicator = document.getElementById('esc-indicator');
					if (escIndicator && menu.classList.contains('menu-open')) {
						escIndicator.style.width = '0ch';
						escIndicator.style.overflow = 'hidden';
						escIndicator.style.whiteSpace = 'nowrap';
						animate(escIndicator, { opacity: 1, transform: 'translate(0)' }, { duration: 0.2, ease: "easeOut" });
						animate(escIndicator, { width: '3ch' }, { duration: 0.4, easing: 'steps(3, end)', delay: 0.05 });
					}
				}

				open ? closeMenu() : openMenu();
			}

			function delayedMenu(delay = 3000) {
				const menuOpen = menu.classList.contains('menu-open');
				if (menuOpen) {
					return;
				}

				clearTimeout(menuDelayTimer);

				const scrollPosition = window.scrollY;
				if (scrollPosition === 0) {
					setMenuIcon('user');
				}

				menuDelayTimer = setTimeout(() => {
					if (currentIcon === 'user') {
						setMenuIcon('hamburger');
					}
				}, delay);
			}

			menu.delayedMenu = delayedMenu;
			menu.setMenuIcon = setMenuIcon;
			menu.toggleMenu = toggleMenu;
			menu.getCurrentIcon = () => currentIcon;
			menu.animateBookmarksOut = animateBookmarksOut;
			menu.animateBookmarksIn = animateBookmarksIn;
			menu.updateActiveBookmarks = updateActiveBookmarks;

			updateActiveBookmarks();
			window.addEventListener('popstate', updateActiveBookmarks);
			document.addEventListener('htmx:afterSwap', (e) => {
				try {
					const target = e?.detail?.target;
					if (!target) return;
					if (target.id === 'main') updateActiveBookmarks();
				} catch {}
			});
			document.addEventListener('htmx:pushedIntoHistory', updateActiveBookmarks);
		</script>
	}
}

func (p *Props) menuHyperscript() string {
	return `
	on click or keydown[key is 'Enter' or key is ' ']
		halt the event
		call me.toggleMenu()
	end

	on click from elsewhere
		if me.matches('.menu-open') and not event.target.closest('#menu-bg')
			call me.toggleMenu()
		end
	end

	on htmx:afterRequest from window
		if me.matches('.menu-open')
			call me.toggleMenu()
		end
	end 

	on mouseenter
		if me.getCurrentIcon() is 'user'
			call me.setMenuIcon('hamburger')
		end
	end

	on keydown[key is 'Escape'] from window
		if me.matches('.menu-open')
			call me.toggleMenu()
			exit
		end

		set now to Date.now()
		if now - me.lastEscapeTime < 500
			call me.toggleMenu()
			set me.lastEscapeTime to 0
		else
			set me.lastEscapeTime to now
		end
	end
	`
}

templ (p *Props) Menu() {
	<div
		id="nav-menu"
		tabindex="0"
		class="hidden fixed top-2 left-4 z-50 justify-center items-center p-1.5 rounded-full cursor-pointer outline-none md:flex bg-base-600 text-secondary-601 hover:text-primary-401"
		_={ p.menuHyperscript() }
	>
		@p.menuController()
		<svg viewBox="0 0 24 24" width="1.5rem" height="1.5rem" fill="none" stroke="currentColor" stroke-width="1.5" stroke-linecap="round">
			<path id="menu-top" d="M 3,7 C 8,7 16,7 21,7"></path>
			<path id="menu-mid" d="M 3,12 C 8,12 16,12 21,12"></path>
			<path id="menu-bot" d="M 3,17 C 8,17 16,17 21,17"></path>
		</svg>
		<kbd
			id="esc-indicator"
			class="absolute top-2.5 left-8 text-[0.625rem] font-mono pointer-events-none opacity-0"
			style="transform: translate(-100%);"
		>
			esc
		</kbd>
	</div>
	@p.MenuExpanded()
}

templ (p *Props) MenuExpanded() {
	<div id="nav-menu-expanded" class="hidden md:block fixed inset-0 z-40 pointer-events-none h-svh">
		<div id="menu-backdrop" class="absolute inset-0 opacity-0 backdrop-blur min-h-svh bg-black/10 cursor-w-resize"></div>
		<div
			id="menu-bg"
			class="flex absolute top-0 left-0 flex-col justify-between rounded-br-[3rem] rounded-tr-[3rem] border-r-1 border-base-700 shadow-sm px-4 pt-12 pb-8 h-full min-w-fit bg-base-600"
			style="transform: translateX(-100%);"
		>
			@p.MenuBookmarks()
			@p.MenuAccount()
		</div>
	</div>
}

templ (p *Props) MenuBookmarks() {
	if p.Bookmarks != nil {
		<div
			id="menu-bookmarks"
			class="flex flex-col gap-4"
			hx-target="#main"
			hx-swap="outerHTML"
			hx-push-url="true"
		>
			@p.Logo
			for _, link := range p.Bookmarks {
				@button.GetCustom(link.Route(), icon.Text(link.Icon, link.Text()), button.Primary, "justify-start")
			}
		</div>
	}
}

templ (p *Props) MenuAccount() {
	<div id="menu-account" class="flex flex-col gap-2 w-full">
		@button.GetCustom(p.Account.Route(), icon.Text(p.Account.Icon, p.Account.Text()), button.Primary, "justify-start")
		@button.GetCustom(p.Settings.Route(), icon.Text(p.Settings.Icon, p.Settings.Text()), button.Primary, "justify-start")
	</div>
}
