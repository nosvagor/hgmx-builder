package button

import (
	"github.com/nosvagor/hgmx-builder/views/components"
	"github.com/nosvagor/hgmx-builder/views/utils/html"
	"github.com/nosvagor/hgmx-builder/views/utils/htmx"
)

// <-- Models <--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--<--

type Variant int

const (
	Primary Variant = iota
	Secondary
	External
	Special

	Constructive
	Transformative
	Destructive
)

type Props struct {
	components.Styler

	Href    string
	HX      *htmx.Props
	Content components.Customizeable
	Variant Variant
}

func (p *Props) Style(classes ...string) components.Customizeable {
	p.Styler.Add(classes...)
	return p
}

func (p *Props) classes() string {
	return p.Styler.Build(p.variant())
}

func (p *Props) variant() string {
	switch p.Variant {
	case Primary:
		return "hover:text-primary-401 active:text-accent-401"
	case Destructive:
		return "text-delete-301 hover:text-delete-501 active:text-delete-601"
	case External:
		return "hover:text-link-401 active:text-link-401"
	case Special:
		return "hover:text-honey-400 active:text-honey-400"
	default:
		return "hover:text-primary-401 active:text-accent-401"
	}
}

func (p *Props) hyprscript() string {
	return `on mouseenter or mousedown or touchstart queue none send hovered to first <svg/> in me then wait 1000ms`
}

func options(p *Props) templ.Attributes {
	if p.HX != nil {
		return p.HX.Opts()
	}
	return templ.Attributes{}
}

// === Button Component ========================================================
templ (p *Props) Render() {
	if len(p.Href) > 0 {
		@html.Link(p.Href) {
			<button _={ p.hyprscript() } class={ p.classes() }>
				@p.Content.Render()
			</button>
		}
	} else {
		<button _={ p.hyprscript() } class={ p.classes() } { options(p)... }>
			@p.Content.Render()
		</button>
	}
}

// --> Factories -->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->-->

func Get(path string, content components.Customizeable, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Get(path, opts...), Content: content, Variant: Primary}
	return p.Render()
}

func GetCustom(path string, content components.Customizeable, variant Variant, classes string, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Get(path, opts...), Content: content, Variant: variant}
	p.Styler.Add(classes)
	return p.Render()
}

func Link(href string, content components.Customizeable) templ.Component {
	p := &Props{Href: href, Content: content, Variant: External}
	return p.Render()
}

func Bust(path string, content components.Customizeable, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Bust(path, opts...), Content: content, Variant: Primary}
	return p.Render()
}

func Post(path string, content components.Customizeable, opts htmx.Options) templ.Component {
	p := &Props{HX: htmx.Post(path, opts), Content: content, Variant: Constructive}
	return p.Render()
}

func Put(path string, content components.Customizeable, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Put(path, opts...), Content: content, Variant: Transformative}
	return p.Render()
}

func Patch(path string, content components.Customizeable, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Patch(path, opts...), Content: content, Variant: Transformative}
	return p.Render()
}

func Delete(path string, content components.Customizeable, opts ...htmx.Options) templ.Component {
	p := &Props{HX: htmx.Delete(path, opts...), Content: content, Variant: Destructive}
	return p.Render()
}
