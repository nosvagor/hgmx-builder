// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.865
package colors

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"fmt"
	"github.com/alltom/oklab"
	"slices"
)

type ColorScaleView struct {
	Name   string
	Code   string
	Value  oklab.Oklch
	Shades []Shade
}

func Palette(colors []ColorScaleView, hex string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div class=\"p-4 mx-auto max-w-6xl font-sans bg-bgc-600 text-fgc-600\"><div class=\"flex flex-col space-y-3\"><div class=\"flex items-center\"><div class=\"w-16 shrink-0\"></div><div class=\"grid flex-1 grid-cols-11 gap-x-2 mb-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, shade := range colors[0].Shades {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<div class=\"text-sm font-medium text-center\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var2 string
			templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(shade.Value)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 23, Col: 64}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for _, color := range colors {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<div class=\"flex items-center group show-rlcr\" _=\"on click toggle .show-rlcr on me then toggle .show-oklch on me\"><div class=\"pr-4 w-16 text-sm font-semibold text-right capitalize shrink-0\"><span>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var3 string
			templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(color.Name)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 33, Col: 24}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</span> <span class=\"text-xs lowercase\">(")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var4 string
			templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(color.Code)
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 34, Col: 51}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, ")</span></div><div class=\"grid flex-1 grid-cols-11 gap-x-4 my-2\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, shade := range color.Shades {
				templ_7745c5c3_Err = ColorSwatch(shade).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</div></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HexPalette(hex, colors, "Gray").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HexPalette(hex, colors, "Lightness").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HexPalette(hex, colors, "Chroma").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HexPalette(hex, colors, "Light Chroma").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HexPalette(hex, colors, "Dark Chroma").Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func Defs(hex string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<defs><linearGradient id=\"gradientTop\" x1=\"100%\" y1=\"50%\" x2=\"0%\" y2=\"50%\"><stop offset=\"0%\" stop-color=\"#fc0086\"></stop><!-- Rose (rse) --><stop offset=\"8%\" stop-color=\"#f9043a\"></stop><!-- Ruby (rby) --><stop offset=\"16%\" stop-color=\"#fd181a\"></stop><!-- Red (red) --><stop offset=\"23%\" stop-color=\"#ff7220\"></stop><!-- Orange (orn) --><stop offset=\"32%\" stop-color=\"#ff9004\"></stop><!-- Sun (sun) --><stop offset=\"41%\" stop-color=\"#fead05\"></stop><!-- Gold (gld) --><stop offset=\"55%\" stop-color=\"#fddf00\"></stop><!-- Yellow (yel) --><stop offset=\"66%\" stop-color=\"#ecec00\"></stop><!-- Lemon (lem) --><stop offset=\"72%\" stop-color=\"#aae801\"></stop><!-- Lime (lim) --><stop offset=\"80%\" stop-color=\"#58d300\"></stop><!-- Green (grn) --><stop offset=\"89%\" stop-color=\"#28c624\"></stop><!-- Emerald (emr) --><stop offset=\"96%\" stop-color=\"#0ed39a\"></stop><!-- Teal (tea) --><stop offset=\"100%\" stop-color=\"#00e7cb\"></stop><!-- Cyan (cyn) --></linearGradient> <linearGradient id=\"gradientBottom\" x1=\"0%\" y1=\"50%\" x2=\"100%\" y2=\"50%\"><stop offset=\"0%\" stop-color=\"#00e7cb\"></stop><!-- Cyan (cyn) --><stop offset=\"4%\" stop-color=\"#02eeef\"></stop><!-- Aqua (aqu) --><stop offset=\"11%\" stop-color=\"#07e3fe\"></stop><!-- Robin (rbn) --><stop offset=\"20%\" stop-color=\"#0acbff\"></stop><!-- Azure (azr) --><stop offset=\"28%\" stop-color=\"#0aafff\"></stop><!-- Sky (sky) --><stop offset=\"34%\" stop-color=\"#0184fe\"></stop><!-- Blue (blu) --><stop offset=\"45%\" stop-color=\"#4158fa\"></stop><!-- Sapphire (sph) --><stop offset=\"59%\" stop-color=\"#6e40ff\"></stop><!-- Lavender (lav) --><stop offset=\"68%\" stop-color=\"#972eff\"></stop><!-- Purple (prp) --><stop offset=\"77%\" stop-color=\"#c602fe\"></stop><!-- Violet (vio) --><stop offset=\"84%\" stop-color=\"#ea0aeb\"></stop><!-- Pink (pnk) --><stop offset=\"92%\" stop-color=\"#fd01b9\"></stop><!-- Magenta (mag) --><stop offset=\"100%\" stop-color=\"#fc0086\"></stop><!-- Rose (rse) --></linearGradient> <radialGradient id=\"centerMaskFade\"><stop offset=\"0%\" stop-color=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(hex)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 85, Col: 37}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" stop-opacity=\"1\"></stop> <stop offset=\"100%\" stop-color=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var7 string
		templ_7745c5c3_Var7, templ_7745c5c3_Err = templ.JoinStringErrs(hex)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 86, Col: 39}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var7))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" stop-opacity=\"0\"></stop></radialGradient></defs> <polygon points=\"95,50 72.5,88.971 27.5,88.971 5,50 27.5,11.029 72.5,11.029\" fill=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(hex)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 91, Col: 12}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "\"></polygon> <line x1=\"50\" y1=\"50\" x2=\"95\" y2=\"50\" stroke=\"#f00088\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"83.5\" y2=\"30.75\" stroke=\"#ff0000\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"78.5\" y2=\"21.5\" stroke=\"#ff6c06\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"36\" y2=\"11\" stroke=\"#ffff00\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"19\" y2=\"26\" stroke=\"#00ff00\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"5\" y2=\"50\" stroke=\"#00ffff\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"16.25\" y2=\"69.5\" stroke=\"#0acbff\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"45.8\" y2=\"90\" stroke=\"#0000ff\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"72.5\" y2=\"88.97\" stroke=\"#9200ff\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <line x1=\"50\" y1=\"50\" x2=\"82.5\" y2=\"70.25\" stroke=\"#ff00ff\" stroke-width=\"0.25\" stroke-dasharray=\"0.5,1\"></line> <path d=\"M 95,50 L 72.5,11.029 L 27.5,11.029 L 5,50\" fill=\"none\" stroke=\"url(#gradientTop)\" stroke-width=\"0.5\"></path> <path d=\"M 5,50 L 27.5,88.971 L 72.5,88.971 L 95,50\" fill=\"none\" stroke=\"url(#gradientBottom)\" stroke-width=\"0.5\" stroke-linecap=\"round\"></path> <polygon points=\"72.5,50 61.25,69.48 38.75,69.48 27.5,50 38.75,30.52 61.25,30.52\" fill=\"url(#centerMaskFade)\"></polygon>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HexPalette(hex string, colors []ColorScaleView, perspective string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "<div class=\"flex justify-center items-center p-4 bg-bgc-600\"><svg viewBox=\"0 10 100 82\" width=\"1000\" height=\"800\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = Defs(hex).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ.Raw(renderCircles(colors, perspective)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "</svg></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func renderCircles(colors []ColorScaleView, perspective string) string {
	svg := ""
	for _, color := range colors {
		for _, shade := range color.Shades {
			if shade.Hex == "#000000" {
				continue
			}
			isBw := slices.Contains([]string{"blk", "wht"}, color.Code)
			if isBw {
				continue
			}
			isGray := slices.Contains([]string{"bgc", "fgc", "brk", "rst", "olv", "mss", "slt", "gry", "stn", "ash", "bej", "znc"}, color.Code)
			if isGray && perspective != "Gray" {
				continue
			}
			switch perspective {
			case "Lightness":
				svg += fmt.Sprintf(`<circle cx="%.6f" cy="%.6f" r="1" fill="%s" />`, shade.Clx, shade.Cly, shade.Hex)
			case "Light Chroma":
				if shade.Value <= 600 {
					svg += fmt.Sprintf(`<circle cx="%.6f" cy="%.6f" r="1" fill="%s" />`, shade.Cx, shade.Cy, shade.Hex)
				}
			case "Dark Chroma":
				if shade.Value >= 600 {
					svg += fmt.Sprintf(`<circle cx="%.6f" cy="%.6f" r="1" fill="%s" />`, shade.Cx, shade.Cy, shade.Hex)
				}
			case "Chroma":
				svg += fmt.Sprintf(`<circle cx="%.6f" cy="%.6f" r="1" fill="%s" />`, shade.Cx, shade.Cy, shade.Hex)
			case "Gray":
				if isGray {
					svg += fmt.Sprintf(`<circle cx="%.6f" cy="%.6f" r="1" fill="%s" />`, shade.Clx, shade.Cly, shade.Hex)
				}
			}
		}
	}
	return svg
}

type Shade struct {
	Value         int
	Code, L, C, H string
	RL, CR        float64
	Hex           string
	Cx, Cy        float64
	Clx, Cly      float64
}

func tern(cond bool, a, b string) string {
	if cond {
		return a
	}
	return b
}

func ColorSwatch(s Shade) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		var templ_7745c5c3_Var11 = []any{fmt.Sprintf("h-12 w-full text-[10px] font-mono %s rounded bg-%s-%d relative", tern(s.CR <= 2.00, "text-fgc-600", "text-bgc-600"), s.Code, s.Value)}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var11...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var12 string
		templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var11).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 17, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var13 = []any{fmt.Sprintf("absolute -top-5 left-0 right-0 text-center text-[10px] font-semibold %s", tern(s.Code == "bgc", "text-fgc-600",
			tern(s.CR <= 2.00, fmt.Sprintf("text-%s-%d", s.Code, 500), fmt.Sprintf("text-%s-%d", s.Code, s.Value))))}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var13...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 18, "<div class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var14 string
		templ_7745c5c3_Var14, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var13).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var14))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 19, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var15 string
		templ_7745c5c3_Var15, templ_7745c5c3_Err = templ.JoinStringErrs(s.Hex)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 193, Col: 10}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var15))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 20, "</div><div class=\"absolute inset-0 flex flex-col justify-between p-1 opacity-0 group-[.show-rlcr]:group-hover:opacity-100 transition-opacity duration-200\"><div class=\"\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var16 string
		templ_7745c5c3_Var16, templ_7745c5c3_Err = templ.JoinStringErrs(fmt.Sprintf("%0.3f", s.RL))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 196, Col: 45}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var16))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 21, "</div><div class=\"text-xs font-extrabold text-right\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var17 string
		templ_7745c5c3_Var17, templ_7745c5c3_Err = templ.JoinStringErrs(s.L)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 198, Col: 55}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var17))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 22, "</div></div><div class=\"absolute inset-0 flex flex-col justify-between p-1 opacity-0 group-[.show-oklch]:group-hover:opacity-100 transition-opacity duration-200\"><div class=\"text-center\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var18 string
		templ_7745c5c3_Var18, templ_7745c5c3_Err = templ.JoinStringErrs(s.C)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 201, Col: 33}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var18))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 23, "</div><div class=\"text-xs font-extrabold text-center\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var19 string
		templ_7745c5c3_Var19, templ_7745c5c3_Err = templ.JoinStringErrs(s.H)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `app.old/views/pages/colors/colors.templ`, Line: 202, Col: 56}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var19))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 24, "</div></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
