package views 

import (
	"crypto/md5"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"sync"
	"time"

)

type Page struct {
	Title   string
	Content templ.Component
}

templ FullPage(page Page) {
	<!DOCTYPE html>
	<html
		lang="en"
		class="cursor-default scrollbar-thin"
	>
		@Head()
		@Title(page.Title)
		@Body(page.Content)
		// @Footer()
	</html>
}

// =============================================================================
templ Head() {
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		@Favicon()
		@Style("/static/css/main.min.css")
		@Script(ScriptParams{Path: "/static/vendor/htmx.min.js"})
		@Script(ScriptParams{Path: "/static/vendor/_hyperscript.min.js"})
	</head>
}

templ Body(content templ.Component) {
	<body class="font-sans bg-bgc-600 text-fgc-600 h-svh">
		@Main(content)
	</body>
}

templ Footer() {
	<footer>
		<p>Footer</p>
	</footer>
}

// =============================================================================
templ Favicon() {
	<link rel="icon" type="image/png" href="/static/assets/favicon/favicon-32x32.png" sizes="32x32"/>
	<link rel="shortcut icon" href="/static/assets/favicon/favicon.ico"/>
}

templ Title(title string) {
	<title>{ title }</title>
}

templ Main(content templ.Component) {
	<main class="w-[98%] md:w-[96%] h-full mx-auto">
		@content
	</main>
}

type ScriptParams struct {
	Path  string
	Defer bool
}

templ Script(p ScriptParams) {
	if p.Defer {
		<script defer src={ p.Path + hash(p.Path) }></script>
	} else {
		<script src={ p.Path + hash(p.Path) }></script>
	}
}

templ Style(path string) {
	<link rel="stylesheet" href={ path + hash(path) }/>
}

var (
	fileHashes      = make(map[string]string)
	fileHashesMutex sync.RWMutex
)

func hash(filePath string) string {
	fileHashesMutex.RLock()
	hash, exists := fileHashes[filePath]
	fileHashesMutex.RUnlock()

	if !exists {
		fullPath := filepath.Join("static", filePath)
		file, err := os.Open(fullPath)
		if err != nil {
			hash = fmt.Sprintf("?v=error-%d", time.Now().Unix())
		} else {
			defer file.Close()
			hashMD5 := md5.New()
			if _, err := io.Copy(hashMD5, file); err != nil {
				hash = fmt.Sprintf("?v=error-%d", time.Now().Unix())
			} else {
				hash = fmt.Sprintf("?v=%x", hashMD5.Sum(nil))
			}
		}

		fileHashesMutex.Lock()
		fileHashes[filePath] = hash
		fileHashesMutex.Unlock()
	}

	return hash
}
